-- ===========================================
-- ShopDB - Full Schema + Seed + View + Fn/Proc
-- ===========================================
-- اجرا روی دیتابیس shopdb

-- ========== 0) Safety drops (اختیاری) ==========
DROP VIEW IF EXISTS public.vw_products_with_category;
DROP PROCEDURE IF EXISTS public.sp_get_products_by_category(int, refcursor);
DROP PROCEDURE IF EXISTS public.sp_upsert_product(int, text, numeric, int);
DROP FUNCTION  IF EXISTS public.fn_orders_by_customer(int);

DROP TABLE IF EXISTS public.order_items;
DROP TABLE IF EXISTS public.orders;
DROP TABLE IF EXISTS public.products;
DROP TABLE IF EXISTS public.categories;
DROP TABLE IF EXISTS public.customers;

-- ========== 1) Tables ==========
CREATE TABLE public.categories (
    category_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          TEXT NOT NULL UNIQUE
);

CREATE TABLE public.products (
    product_id    INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          TEXT NOT NULL,
    price         NUMERIC(12,2) NOT NULL CHECK (price >= 0),
    category_id   INT NOT NULL REFERENCES public.categories(category_id) ON DELETE RESTRICT
);

CREATE TABLE public.customers (
    customer_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    full_name     TEXT NOT NULL,
    email         TEXT NOT NULL UNIQUE
);

-- سفارش‌ها: status را متنی نگه می‌داریم (Pending/Paid/Cancelled/Shipped)
CREATE TABLE public.orders (
    order_id      INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    customer_id   INT NOT NULL REFERENCES public.customers(customer_id) ON DELETE CASCADE,
    order_date    TIMESTAMP NOT NULL DEFAULT NOW(),
    status        TEXT NOT NULL DEFAULT 'Pending' CHECK (status IN ('Pending','Paid','Cancelled','Shipped'))
);

CREATE TABLE public.order_items (
    order_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    order_id      INT NOT NULL REFERENCES public.orders(order_id) ON DELETE CASCADE,
    product_id    INT NOT NULL REFERENCES public.products(product_id) ON DELETE RESTRICT,
    qty           INT NOT NULL CHECK (qty > 0),
    unit_price    NUMERIC(12,2) NOT NULL CHECK (unit_price >= 0)
);

-- ========== 2) Indexes ==========
CREATE INDEX IF NOT EXISTS ix_products_category_id    ON public.products(category_id);
CREATE INDEX IF NOT EXISTS ix_orders_customer_id      ON public.orders(customer_id);
CREATE INDEX IF NOT EXISTS ix_orders_order_date       ON public.orders(order_date);
CREATE INDEX IF NOT EXISTS ix_order_items_order_id    ON public.order_items(order_id);
CREATE INDEX IF NOT EXISTS ix_order_items_product_id  ON public.order_items(product_id);

-- ========== 3) Seed data ==========
INSERT INTO public.categories(name) VALUES
 ('Electronics'), ('Accessories'), ('Home'), ('Sports')
ON CONFLICT DO NOTHING;

INSERT INTO public.products(name, price, category_id) VALUES
 ('Tablet',      600.00, 1),
 ('Laptop',     1500.00, 1),
 ('Headphones',  120.00, 2),
 ('Keyboard',     40.00, 2),
 ('Mouse',        25.00, 2),
 ('Blender',      80.00, 3),
 ('Tennis Racket',200.00, 4)
ON CONFLICT DO NOTHING;

INSERT INTO public.customers(full_name, email) VALUES
 ('Ali Reza', 'ali@test.com'),
 ('Sara Noor', 'sara@test.com')
ON CONFLICT DO NOTHING;

-- چند سفارش نمونه در ماه‌های مختلف برای گزارش‌گیری
-- مشتری 1
INSERT INTO public.orders(customer_id, order_date, status) VALUES
 (1, DATE '2025-01-21', 'Paid'),
 (1, DATE '2025-02-10', 'Paid'),
 (1, DATE '2025-03-05', 'Pending');

-- مشتری 2
INSERT INTO public.orders(customer_id, order_date, status) VALUES
 (2, DATE '2025-01-15', 'Paid'),
 (2, DATE '2025-04-11', 'Cancelled');

-- آیتم‌ها (از محصول‌های بالا استفاده می‌کنیم)
-- برای سادگی قیمتِ لحظه درج را از products می‌گیریم
INSERT INTO public.order_items(order_id, product_id, qty, unit_price)
SELECT o.order_id, 1, 1, p.price FROM public.orders o JOIN public.products p ON p.product_id = 1 WHERE o.order_id = 1;
INSERT INTO public.order_items(order_id, product_id, qty, unit_price)
SELECT o.order_id, 3, 2, p.price FROM public.orders o JOIN public.products p ON p.product_id = 3 WHERE o.order_id = 1;

INSERT INTO public.order_items(order_id, product_id, qty, unit_price)
SELECT o.order_id, 2, 1, p.price FROM public.orders o JOIN public.products p ON p.product_id = 2 WHERE o.order_id = 2;

INSERT INTO public.order_items(order_id, product_id, qty, unit_price)
SELECT o.order_id, 4, 3, p.price FROM public.orders o JOIN public.products p ON p.product_id = 4 WHERE o.order_id = 3;

INSERT INTO public.order_items(order_id, product_id, qty, unit_price)
SELECT o.order_id, 5, 2, p.price FROM public.orders o JOIN public.products p ON p.product_id = 5 WHERE o.order_id = 4;

INSERT INTO public.order_items(order_id, product_id, qty, unit_price)
SELECT o.order_id, 6, 1, p.price FROM public.orders o JOIN public.products p ON p.product_id = 6 WHERE o.order_id = 5;

-- ========== 4) View ==========
CREATE OR REPLACE VIEW public.vw_products_with_category AS
SELECT
  p.product_id        AS idproduct,
  p.name              AS productname,
  c.name              AS categoriename,
  p.category_id       AS idcategory
FROM public.products p
JOIN public.categories c ON c.category_id = p.category_id;

-- ========== 5) Function (list output) ==========
-- لیست سفارش‌های یک مشتری با تعداد آیتم و جمع مبلغ
DROP FUNCTION IF EXISTS public.fn_orders_by_customer(int);

CREATE OR REPLACE FUNCTION public.fn_orders_by_customer(p_customer_id int)
RETURNS TABLE (
    order_id     int,
    order_date   timestamp,
    status       text,
    items_count  int,
    order_total  numeric
)
LANGUAGE sql
AS $$
  SELECT
    o.order_id,
    o.order_date,
    o.status,
    COUNT(oi.order_item_id)                              AS items_count,
    COALESCE(SUM(oi.qty * oi.unit_price), 0)::numeric    AS order_total
  FROM public.orders o
  LEFT JOIN public.order_items oi ON oi.order_id = o.order_id
  WHERE o.customer_id = p_customer_id
  GROUP BY o.order_id, o.order_date, o.status
  ORDER BY o.order_date DESC;
$$;

-- ========== 6) Procedure: Upsert Product (Insert/Update) ==========
DROP PROCEDURE IF EXISTS public.sp_upsert_product(int, text, numeric, int);

CREATE OR REPLACE PROCEDURE public.sp_upsert_product(
    IN p_product_id  int,
    IN p_name        text,
    IN p_price       numeric,
    IN p_category_id int
)
LANGUAGE plpgsql
AS $$
BEGIN
    IF p_product_id IS NULL OR p_product_id = 0 THEN
        INSERT INTO public.products(name, price, category_id)
        VALUES (p_name, p_price, p_category_id);
    ELSE
        UPDATE public.products
        SET name = p_name,
            price = p_price,
            category_id = p_category_id
        WHERE product_id = p_product_id;

        IF NOT FOUND THEN
            RAISE EXCEPTION 'No product with id %', p_product_id;
        END IF;
    END IF;
END;
$$;

-- ========== 7) Procedure: Products by Category (REFCURSOR) ==========
DROP PROCEDURE IF EXISTS public.sp_get_products_by_category(int, refcursor);

CREATE OR REPLACE PROCEDURE public.sp_get_products_by_category(
    IN p_category_id int,
    INOUT ref refcursor
)
LANGUAGE plpgsql
AS $$
BEGIN
    OPEN ref FOR
        SELECT p.product_id, p.name, p.price
        FROM public.products p
        WHERE p.category_id = p_category_id
        ORDER BY p.name;
END;
$$;
